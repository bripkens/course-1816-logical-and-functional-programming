(defn ggT [a b]
  (cond (= a b) a
        (= a 0) b
        (= b 0) a
        (< a b) (ggT a (- b a))
        (< b a) (ggT b (- a b))))

(defn brueche-increment [m n]
  (let [inc-m (inc m) inc-n (inc n)]
    (let [new-m (if (< inc-m n) inc-m 1)
          new-n (if (< inc-m n) n inc-n)]
      (if (= (ggT m n) 1)
        (list [m n] (delay (brueche-increment new-m new-n)))
        (brueche-increment new-m new-n)))))

(defn brueche [] (brueche-increment 1 2))