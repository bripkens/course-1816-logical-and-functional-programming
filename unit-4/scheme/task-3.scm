(define (make-cd-control)
  (define status '())
  (define titelzahl '())
  (define aktueller-titel '())
  (define abspielstatus '())

  (define (reset)
    (set! status 'leer)
    (set! titelzahl 0)
    (set! aktueller-titel 0)
    (set! abspielstatus 'undefiniert))

  (define (einlegen neue-titelzahl)
    (if (eq? status 'cd)
      'cd-fach-belegt
      (begin (set! status 'cd)
          (set! titelzahl neue-titelzahl)
          (set! aktueller-titel 1)
          (set! abspielstatus 'stop))))

  (define (vor)
    (if (and (< aktueller-titel titelzahl) (eq? status 'cd))
          (set! aktueller-titel (+ aktueller-titel 1))))

  (define (abspielen)
    (if (eq? status 'cd)
      (set! abspielstatus 'abspielen)))

  (define (stop)
    (if (eq? status 'cd)
      (begin (set! abspielstatus 'stop)
             (set! aktueller-titel 1))))

  (define (zurueck)
    (if (and (> aktueller-titel 1) (eq? status 'cd))
          (set! aktueller-titel (- aktueller-titel 1))))

  (reset)

  (lambda (message parameter)
    (cond ((eq? message 'einlegen)
            (einlegen parameter))
          ((eq? message 'auswerfen)
            (reset))
          ((eq? message 'abspielen)
            (abspielen))
          ((eq? message 'stop)
            (stop))
          ((eq? message 'vor)
            (vor))
          ((eq? message 'zurueck)
            (zurueck))
          ((eq? message 'test)
            (list status abspielstatus titelzahl aktueller-titel))
          (else '()))))


(define cd1 (make-cd-control))
(cd1 'einlegen 4)
(cd1 'vor 'dummy)
(cd1 'vor 'dummy)
(cd1 'abspielen 'dummy)
(cd1 'vor 'dummy)
(cd1 'vor 'dummy)
(cd1 'test 'dummy)
(cd1 'einlegen 10)
(cd1 'auswerfen 'dummy)
(cd1 'test 'dummy)